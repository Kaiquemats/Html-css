abbr = abreviação/ descrição da parada
quer colocar o fotos em diferentes telas no site = picture source media type em baixo coloca img e lembrese sempre colocar em ordem 
div:hover > p = > quer dizer o filho da div
display: 
block é pra aparecer e none é pra nada, desaparecer


pseudo class: basicamente Uma pseudo-classe CSS é uma palavra-chave adicionada às declarações de um seletor
após um sinal de dois pontos e especificam um estado especial de um elemento. 

altura height
width largura
weight 

ordens de propriedades
padding, border, margin e outline
sempre fazer em antihorario do relogio
top. right, bottom e left

outline fica entre border e margin (pra que vou usar isso? eu não faço ideia. talvez la pra frente eu saiba)

PARA QUE EU CENTRALIZE A PARADA DO BORDER OU TMB IMAGEM É SO TACAR BORDER: AUTO; CABOU!!! 

box shadow sempre coloca 3 pxs e um black

deslocamento horizontal, deslocamento vertical, espalhamento e sombra

border radius
é que nem o box shadow que é esquerda direita e esquerda direita
ele tmb pode ser usada que nem o padding e os outros, como 20px 20px. ele fica 20 por 20 em cada parte LEMBRE SE DISSO!!


degradê como colocar no css: background-image: linear-gradient(sempre coloca a posição da cor como to right, to bottom, to left e to top e as cores ao lado)



variaveis no css: :root { --cor0 ()

--fonte-padrao: 
--fonte-destaque:

}

responsividade de video
left
top
bottom
right

background repeat: no repeat = so vai ter apenas uma imagem
background repeat: repeat = vai ter varias da mesma imagem
background-size: px px
background repeat: repeat-y =  vai repetir pra baixo
background repeat: repeat-x = vai repetir pro lado

vh = view port
                 tamanho fixo em pixel ou em % da tela
                 auto = deixar o navegador se virar pra tentar centralizar a imagem
                 contain = mostrar 100% da tela sem cortar. tenta se adaptar
background-size: cover = ele não exibe 100% da imagem e sim ocupa 100% da viewport

shothand background

scroll (padrão) a imagem de fundo vai rolar junto com o conteudo
fixed a imagem de fundo vai ficar fixada enquanto o conteudo vai sendo rolado

background color > background image > background position > background repeat > background attachment

position relative = todo posição de um box em html por padrão é posição relativo


container = posição relativo

conteudo = posição absoluto

transform = translate -50% -50%

font-variant- small caps = deixar algumas letras maiores do que as outras 

eu não posso criar uma tabela pra criar dentro da estrutura do meu site

todas as tabelas em html tem a seguinte hierarquia simples
table = tabela
table row = linha de tabela
table header = cabeçalho de tabela
table data = dado de tabela

tr = linhas
td = dados

se a hierarquia

border colapse separete = separado ou colapse = junto

text align alinhamento horizontal
vertical alinhamento vertical. align: middle, top e bottom

numero por padrão sempre vai ficar na direita mas com o text align é possivel mudar de posição dele

thead = cabeça da tabela
tbody = corpo da tabela
tfoot = pé da tabela

th = titulo
td = dado

scope e caption

caption é uma legenda para a tabela
sempre coloca embaixo do table

scope col = tabela que tenha coluna
scope row tabela que é na mesma linha

efeito zebrado 

tbody > tr: nth child (2n)
	    odd = basicamente vai mudar pra impar

odd,   even 
impar, par

Cabeçalho fixo em tabelas grandes

thead > tr > th {
	position sticky
	top -1px
	background-color: gray;
}
sempre coloca position: relative; no table tmb

colspan = coluna
rowspan = linha

colgroup = basicamente colocar alguma cor por coluna

basicamente tabela responsivas

overflow x: auto
envelopa o table por div e depois coloca id container


iframe = quadro em linha

tamanho padrão de um iframe é de 300x150

em questão de colocar algo no iframe como por exemplo height e width e depois colocar essa mesma configuração ou outra, a css vai cobrir a configuração do iframe

scolling no tira o scroll
         yes coloca scroll
         auto padrão

colocar pagina no iframe = no iframe coloca a tag name ao lado e depois vai no link e coloca target e o nome que colocou


srdoc = basicamente voce pode colocar seu codigo do html dentro do iframe, imagens e etc..


Inconvenientes do iframe

- Dificuldades de acesso ao conteúdo pelos mecanismos de busca;

- Baixa acessibilidade (dificuldades de acesso ao conteúdo pelos leitores de tela, para deficientes visuais);

- Baixa usabilidade (navegador ou usuário acabam se confundindo);

- Baixa segurança (abre as portas do seu site para outros sites);


tornando sites mais seguros

sandbox sandbox="allow-same-origin allow-forms allow-scripts" referrerpolicy="no-referrer-when-downgrade"
                 basicamente dentro de sandbox é possivel desativar algumas config do site 

Caso adicionemos uma borda que circunda as imagens dos ícones do menu, mas que só é exibida e acionada por hover, ocorre que, quando a borda surge, os outros botões vizinhos se mexem... visto que a borda não faz parte do objeto... Eles se deslocam justamente por causa do surgimento da borda, que expande a respectiva caixa e empurra os outros ícones. 

PROPRIEDADE BOX-SIZING:

Essa movimentação dos ícones vizinhos, esse deslocamento, não é legal porque atrapalha a experiência da maioria dos usuários e deixa o efeito da nossa animação muito brusca.

Para evitar esse deslocamento dos itens vizinhos ocasionado pelo surgimento da borda, dentro do seletor da imagem do ícone (objeto de recebe a borda) temos que utilizar a Propriedade de Estilo " box-sizing " com o valor " border-box ".

Isso fará com que a borda faça parte do objeto, faça parte da caixa da imagem... Fazendo com que os itens vizinhos não se desloquem com o aparecimento da mesma.

A propriedade box-sizing modifica a maneira de exibir o tamanho de uma caixa, por padrão o tamanho absoluto de uma caixa é calculado pelo 'tamanho definido' (width e height) + valor do 'padding' + valor da 'borda'. Isso muitas vezes pode gerar certa confusão na hora de alinharmos algumas caixas no nosso layout, porque temos sempre que considerar que a determinada caixa não terá como dimensão somente o width ou o height definido, mas também o padding e a borda... Fazendo uma soma de tudo isso... 

Por isso a propriedade box-sizing é tão útil, pois permite que você escolha como as suas caixas serão medidas dentro do documento. Dessa forma não precisamos perder tempo fazendo cálculos para determinar o tamanho final dos boxes dos nossos elementos quando declaramos as propriedades padding e border. Essa propriedade aceita os seguintes valores:

content-box - Esse é o valor padrão, gera o comportamento padrão descrito anteriormente. As propriedades de largura (width) e altura (height) são medidas incluindo só o conteúdo, mas não o padding e o border. (forma de medida absoluta = width/height + padding + border)

border-box - O cálculo padrão que conhecemos para a medida da caixa é alterado, fazendo com que o navegador passe a considerar as propriedades de largura (width) e altura (height) do elemento INCLUINDO o 'padding' e o 'border'. (forma de medida absoluta = width/height) 

padding-box - O cálculo padrão que conhecemos para a medida da caixa é alterado, fazendo com que o navegador passe a considerar as propriedades de largura (width) e altura (height) do elemento INCLUINDO o 'padding' mas não incluindo o 'border'. (forma de medida absoluta = width/height + border) 

Use a declaração box-sizing: border-box em todos os seus projetos. Ela tornará seu trabalho mais produtivo. Permitindo usar um Box Model (Modelo de Caixas) "corrigido". 

Inclusive você pode inserir essa declaração no SELETOR GLOBAL do seu projeto, dessa forma todas as caixas da sua página terão como medida absoluta somente o width e height (padding e border inclusos).

Obs.: Mas esteja ciente de que ao definir o Box Model Corrigido em um projeto existente é quase certo que o layout quebrará a menos que você se disponha a encarar o trabalhão de recalcular as dimensões dos boxes do site

No do menu desse projeto, uma outra maneira de evitar esse deslocamento dos itens vizinhos, sem utilizar o "box-sizing", seria criando a borda da imagem com um outline ao invés de border. Outline não influencia no tamanho total do elemento e portanto não iria empurrar os outros itens. 




                                                                              FORMULARIOS





Os formulários devem estar dentro de:

para tirar os nomes que ficam gravados nos forms é so dá autocomplete off

	<form>	      </form>


Input de texto:	<input type="text" name=" " id=" ">

	Ex:	<form>
			<p>Nome: <input type="text" name="nome" id="nome"></p>
		</form>


Input de envio:	<input type="submit" value=" ">

	Ex:	<form>
			<p><input type="submit" value="Enviar"></p>
		</form>

name é mais usado para php e html
id é mais usado para javascript e label

usa sempre label

para identificar as caixas de textos e os dados

existe dois metodos

get = coloca os dados na url
post = ele não aparece na url mas ele aparece em outro lugar que dá pra ver onde está os dados simnples


so pode mandar no total até 3mil byte no get

get é para quando for colocar alguma coisa não sensivel. como nome, peso e etc
post: coisas sensiveis como fotos, senha, cartão de creditos, passar mais de 3mil byte e envio de arquivos

lembre-se no futuro para aprender https pra aprender dados e expressão regulares ou regEx

lembre-se quando for colocar em questão de senha

input password 

input reset é botão de limpar 

required basicamente é um requerimento do form e tambem é possivel colocar um requerimento de letras ou numeros como
minlength e maxlength

size 10 = é possivel mudar a largura da caixa
e dá para meio que dá dicas nas caixas como o placeholder

o autocomplete basicamente é possivel colocar em inputs/caixas de nomes/senhas e etc 
é so ir no input que voce quer e coloque autocomplete e vai ter varias coisas para colocar como username e currentpassword  que serve para senhas que o usu ja colocou e tem o 
newpassword que é pra como cadastro e etc


input number é basicamente deixar a caixa de senha ou numeros somente numeros e o step = é passo. Serve para escolas tmb como 0,5, 5,5 e etc 

input month que é basicamente colocar o mes de um periodo letivo ou outra coisa e pode colocar o value a cada input tmb para colocar nas caixas como um exemplo
e o input date que mostra o dia, mes e o ano 

input email basicamente emails


input tel para telefones

pattern:

O atributo pattern especifica uma Expressão Regular para validar o conteúdo de um campo input. Dessa forma, para que a submissão do form seja executada, o valor do controle de formulário deve corresponder ao padrão especificado na expressão regular (pattern).

Mas o que é uma expressão regular? Expressões Regulares ou Regular Expressions (RegEx) se tratam de uma forma de notação - sistema de representação gráfica - usado para especificar um padrão de texto que faz verificações em conteúdos textuais... De forma resumida, essas verificações textuais possuem três principais aplicações: 

1 - Efetuar buscas:

Não se trata de uma simples busca por palavras como estamos acostumados. Com o RegEx, você pode buscar por PADRÕES que definem qual é o formato esperado do termo que está sendo procurado. Por exemplo: Num texto qualquer, buscar todos os termos que tenham um formato de data (dd/mm/aaaa) SEM SABER EXATAMENTE QUAL É A DATA QUE ESTAMOS PROCURANDO.

2 - Validações em texto:

Com o RegEx podemos fazer validações em texto, ou seja, verificar se determinada sequência de caracteres atende ao PADRÃO estabelecido (o atributo "pattern" usa essa aplicação na sua validação por RegEx).

3 - Fazer substituições:

No contexto de Expressão Regular, as substituições vão muito além de simplesmente substituir texto por texto, pois no RegEx há um recurso em que é possível extrair apenas uma parte de um padrão para utilizá-lo no destino. Portando, se trata se uma substituição que tem como base um padrão, bem como partes desses padrões também.

As aplicações do RegEx descritas acima podem ser executadas em qualquer sequência de caracteres, seja para um parágrafo de um livro, um texto estruturado ou até mesmo o próprio conteúdo de um código. (o atributo pattern no HTML5 utiliza para validar o conteúdo do input - Validação em texto)

Várias ferramentas tem suporte para expressões regulares. A maioria dos ambientes de desenvolvimento (como o VSC por exemplo) também suportam RegEx nativamente, seja para buscar arquivos ou conteúdo dentro dos arquivos. Além de usar RegEx dentro de ferramentas, também é possível utilizá-lo em softwares usando linguagens de programação. Praticamente qualquer linguagem de programação suporta expressões regulares. 

Importante: A estrutura de expressões regulares é escrita em uma linguagem formal única baseada na teoria de linguagens formais, que descrevem um conjunto de cadeia de caracteres e regras (Entende-se por linguagem formal estudo de modelos matemáticos que possibilitam a especificação e o reconhecimento de linguagens).

No entanto, a implementação dessa estrutura (RegEx) pode variar de linguagem para linguagem. Isso significa que, dependendo da linguagem de desenvolvimento utilizada, o jeito de estruturar um padrão RegEx em termos de sintaxe e recursos pode mudar.

Na prática, como fazemos para definir padrões com o RegEx no atributo pattern do HTML?

Toda expressão regular no pattern deve começar com o marcador " ^ " e terminar com o marcador " $ " (Esses marcadores de início e fim são chamados de âncoras).

De forma resumida, para definir padrões, as expressões regulares trabalham com algumas estruturas como: Classes de caracteres, Intervalos, Âncoras, Constructos de agrupamento e entre muitas outras estruturas...

Segue um exemplo de uso dessas estruturas mencionadas para especificar um padrão validador simples para números de telefone (inclusive telefone celular - xxxxx-xxxx)... Usaremos:

Classes de caracteres: Como estamos validando um telefone, precisamos especificar que só iremos aceitar caracteres numéricos (especificar uma classe de caractere). Para definir essa classe, abrimos e fechamos colchetes " [] " e dentro deles, definimos a classe desejada. Fica assim nesse caso: [0-9] - Dessa forma, estamos dizendo que só aceitamos números entre " 0 e 9 ".

Intervalo: Agora que determinamos a classe, temos que dizer quantos números iremos aceitar (intervalo) antes do traço " - ". Para definir esse intervalo, abrimos e fechamos chaves " {} " e dentro delas, definimos o intervalo desejado. Fica assim: {4,5} - Dessa maneira, estamos dizendo que só aceitamos a entrada de " 4 a 5 " caracteres (5 para o caso dos celulares). 

Agora, ainda no código da expressão regular, basta inserir um traço " - " depois do intervalo e especificar novamente uma classe numérica... Logo em seguida defina um outro intervalo, mas dessa vez apenas para quatro caracteres.

O resultado final fica assim: ^[0-9]{4,5}-[0-9]{4}$

No caso do nosso exemplo, criamos um padrão validador simples para números de telefone, entretanto é possível criar padrões com Expressões Regulares para todo tipo de dado, como por exemplo: Data, hora, endereço de IP, e-mail, URL, CPF, RG, cartão de crédito e por aí vai... Na internet também é possível encontrar esses padrões RegEx já montados, restando o trabalho de só copiar e colar nesses casos.

O atributo "pattern" é válido para os inputs do tipo text, password, tel, number, date, month, time, email e mais alguns outros... 

Importante: Apesar desses padrões por RegEx no pattern aumentarem o nível de validação dos nossos campos de entrada, nenhum deles é suficiente para conseguir bloquear totalmente alguns tipos de dados inseridos da forma errada... Você pode usar o pattern, mas tenha em mente que essa validação de fato tem que ser feita usando uma linguagem de programação, como JS ou PHP por exemplo. 

Conclusão:

O atributo pattern, quando especificado, é uma expressão regular à qual o valor da entrada na caixa input deve corresponder para que o "value" passe na validação de restrição.

Se o valor do componente de entrada não estiver em conformidade com as restrições definidas pelo valor de pattern (a expressão regular definida), a submissão do formulário não será executada.



existe tmb o fieldset que é basicamente colocar as coisas do formulario em uma caixinha e tem o legends que é o nome do formulario como, dados pessoais e etc e dá para mudar no css a borda e etc


checkbox 
radio

checkbox:

O input do tipo checkbox define uma caixa de seleção. A caixa de seleção é mostrada como uma pequena box quadrada que pode ser marcada pelo usuário com um clique (marca de verificação). 

As caixas de seleção são usadas para permitir que o usuário selecione uma ou mais opções dentre um número limitado de opções. A possibilidade de selecionar mais de um item AO MESMO TEMPO é uma característica fundamental do input checkbox. 

Sendo que somente os valores das caixas marcadas pelo usuário que serão enviados para o back-end quando a submissão do form for executada.

Dependendo do seu projeto, você pode trabalhar com uma ou mais caixas de checagem no seu formulário. A quantidade de caixas de checagem (opções) contidas no seu form vai depender da necessidade da sua aplicação.
 
O checkbox é um input de entrada como qualquer outro, portanto ele também precisa de uma label. Geralmente, para esse tipo de controle, no HTML nós inserimos o código do input ANTES do código da label, dessa forma a caixa de seleção fica na frente da label... 

No entanto, você também pode fazer o inverso e inserir o código do input após o código da label, posicionando a label na frente da caixa de seleção. 

Atenção: No input checkbox, os atributos "name" e "id" também devem ser configurados normalmente... No entanto, quando você tem mais de um checkbox no seu form e essas caixas de seleção representam diferentes opções dentro de um mesmo contexto, é recomentado atribuir a mesma nomenclatura para os atributos "name" dessas caixas de seleção, assim especificamos que essas boxes são de um mesmo grupo e portanto elas representam diferentes opções dentro de um mesmo assunto. Assim quando o usuário selecionar as opções de seu interesse, esses dados serão enviados para o servidor identificados com o mesmo nome, indicando que fazem parte de um mesmo grupo checkbox.

Dessa forma, os atributos "name" são sempre iguais para cada grupo de checkbox... Por exemplo: Se no seu form você tiver DOIS GRUPOS de checkbox, para dois tipos de informações que não são correlacionadas, aí sim um desses grupos vai ter um name e o outro grupo um name diferente, desvinculando os grupos (já o id é sempre único para cada checkbox individualmente). Sendo que o VÍNCULO entre o componente checkbox e sua respectiva label também deve ser estabelecido.

Uma outra característica importantíssima do input checkbox: Como sabemos, diferentemente de outros inputs, no checkbox o usuário não insere um dado digitando, ele simplesmente marca a opção que lhe atende...

Dessa maneira, para o funcionamento correto de uma caixa de seleção, é necessário que especifiquemos um atributo "value" para a mesma... (insira o value dentro da tag do input)

Determinando assim o valor (DADO) que aquela caixa de seleção REPRESENTA. O conteúdo contido nesse value que será enviado para o servidor no par nome-valor na hora da submissão do form (num checkbox: par nome-valor = atributos 'name' e 'value' respectivamente).

Obs.: Se você não definir um atributo value para o checkbox, o dado que será enviado contido no par nome-valor será um dado genérico "on". 

Segue um exemplo de código com inputs do tipo checkbox:

<form action="cadastro.php" method="get">
    <fieldset>
       <legend>Qual dessas é a sua linguagem de programação preferida?</legend> 
       
       <input type="checkbox" name="linguagem" id="js" value="JavaScript">
       <label for="js">JavaScript</label>

       <input type="checkbox" name="linguagem" id="php" value="PHP">
       <label for="php">PHP</label>

       <input type="checkbox" name="linguagem" id="python" value="Python"> 
       <label for="python">Python</label>
    </fieldset>
</form>

Dessa forma, o checkbox ou caixa de seleção nada mais é que um tipo de campo que já contém informações predefinidas e que o usuário deverá marcar, dispondo da possibilidade de ativar e desativar valores individuais... Tendo a opção de selecionar nenhuma, uma ou mais caixas (somente os valores das caixas marcadas que serão enviados para o back-end).

radio:

O input do tipo radio define um radio botton (botão de rádio). O botão de rádio é mostrado como um pequeno círculo que pode ser selecionado pelo usuário com um clique. Esse elemento geralmente é usado em grupos (radio groups)... Ou seja, vários botões de rádio juntos formam um radio group (grupo).

Os radio buttons são usados para permitir que o usuário selecione uma opção dentre um número limitado de opções. A possibilidade de selecionar APENAS UM ITEM dentre os disponíveis em um grupo é uma característica fundamental do input radio. Ao clicar em uma opção quando outra já está marcada, faz com que aquela opção marcada se desmarque automaticamente. Você pode ter vários grupos distintos de radio buttons no mesmo formulário, podendo fazer a seleção de apenas um item em cada um desses grupos.

Nota: Uma característica peculiar do input radio é que quando uma opção é selecionada, se clicarmos novamente, a seleção não sai... Dentro de um grupo, você até pode clicar em outra opção para desmarcar a atual, mas a partir do momento que uma opção é selecionada, não é mais possível deixar as opções do grupo em branco novamente sem ter que recarregar a página (fora isso a função do input "reset" também consegue deixar as opções em branco novamente). Isso aparentemente ocorre porque os radio buttons teoricamente foram concebidos para não serem deixados em branco.

Sendo que somente o valor do botão selecionado pelo usuário que será enviado para o back-end quando a submissão do form for executada.

Dependendo do seu projeto, você pode trabalhar com um ou mais botões de rádio no seu formulário. A quantidade de radio buttons (opções) contidas no seu form vai depender da necessidade da sua aplicação.

O radio é um input de entrada como qualquer outro, portanto ele também precisa de uma label. Geralmente, para esse tipo de controle, no HTML nós inserimos o código do input ANTES do código da label, dessa forma a caixa de seleção fica na frente da label... 

No entanto, você também pode fazer o inverso e inserir o código do input após o código da label, posicionando a label na frente da caixa de seleção. 

Atenção: No input radio, os atributos "name" e "id" também devem ser configurados normalmente... No entanto, quando você tem mais de um radio button no seu form e esses botões representam diferentes opções dentro de um mesmo contexto, é obrigatório atribuir a mesma nomenclatura para os atributos "name" desses radio buttons, assim especificamos que esses botões são de um mesmo grupo e portanto eles representam diferentes opções dentro de um mesmo assunto.
 
No caso dos radio buttons, é muito importante que você faça como foi orientado acima e atribua a mesma nomenclatura para os atributos "name", definindo um grupo. A característica fundamental desse tipo de input é que dentre as opções disponíveis, o usuário só possa escolher uma... Entretanto, se você não definir uma mesma nomenclatura para os atributos "name" dos inputs que supostamente formam aquele grupo, a funcionalidade de escolher apenas uma opção é comprometida e anulada (passando a poder escolher 'mais de uma' opção), visto que o sistema considera esses inputs com names diferentes como grupos diferentes.

Dessa forma, os atributos "name" são sempre iguais para cada grupo de radio buttons... Por exemplo: Se no seu form você tiver DOIS GRUPOS de radio buttons, para dois tipos de informações que não são correlacionadas, aí sim um desses grupos vai ter um name e o outro grupo um name diferente, desvinculando os grupos (já o id é sempre único para cada radio button individualmente). Sendo que o VÍNCULO entre o componente radio e sua respectiva label também deve ser estabelecido.

Uma outra característica importantíssima do input radio: Como sabemos, diferentemente de outros inputs, no radio o usuário não insere um dado digitando, ele simplesmente seleciona a opção que lhe atende...

Dessa maneira, para o funcionamento correto de um radio button, é necessário que especifiquemos um atributo "value" para a mesmo... (insira o value dentro da tag do input)

Determinando assim o valor (DADO) que aquele radio button REPRESENTA. O conteúdo contido nesse value que será enviado para o servidor no par nome-valor na hora da submissão do form (num radio: par nome-valor = atributos 'name' e 'value' respectivamente).

Obs.: Se você não definir um atributo value para o radio, o dado que será enviado contido no par nome-valor será um dado genérico "on". 

Segue um exemplo de código com inputs do tipo radio:

<form action="cadastro.php" method="get">
    <fieldset>
        <legend>Escolha a opção que lhe atende:</legend>
                
        <input type="radio" name="opcao" id="masculino" value="M">
        <label for="masculino">Masculino</label>

        <input type="radio" name="opcao" id="feminino" value="F">
        <label for="feminino">Feminino</label>
    </fieldset>
</form>

se eu quero que já apareça nas opções marcado é so usar o checked

file:

O input do tipo file permite que o usuário escolha um arquivo do armazenamento do dispositivo e envie esse arquivo através de um formulário HTML, sendo que o elemento é mostrado como um botão que possui uma espécie de "nota de status" ao seu lado... Essa nota faz referência ao arquivo anexado. 

Dessa forma, quando seus usuários precisarem fazer upload de alguma coisa para o seu sistema, trabalhe com o input file.

Depois de escolhido, o arquivo é enviado para o servidor quando a submissão do é executada (para enviar arquivos, lembre-se que sempre usamos o método post, sendo que o back-end também precisa ser configurado corretamente para fazer o tratamento dos arquivos recebidos).

O input file aceita a entrada de qualquer tipo de arquivo, como por exemplo: Imagens, áudios, vídeos, documentos do word, PDF's e por aí vai... 

Importante: Pode parecer estranho, mas apenas com o input do tipo file, o arquivo anexado pelo usuário não será enviado para o back-end da forma correta e o servidor não será capaz de interpretar os DADOS DO ARQUIVO corretamente. Para que de fato o servidor receba da forma correta esse arquivo enviado pelo formulário, é necessário que façamos uso do atribulo " enctype " (logo abaixo uma explicação sobre esse atributo).

Atributos próprios do input file:

enctype:

O atributo enctype especifica COMO os dados do formulário devem ser CODIFICADOS ao enviá-los para o servidor. Atenção: não é ele que faz o envio dos dados, ele apenas determina a forma de codificação desses dados. O protocolo HTTP que é usado para enviar os dados do formulário do cliente para o servidor, mas o atributo enctype especifica como os dados do formulário devem ser codificados antes de serem enviados.

A codificação é o processo de converter os dados em um formato específico antes de enviá-los para o servidor (servidor = software escrito em alguma linguagem de programação que está executando no server e que recebe e processa os dados do formulário enviados pelo cliente). Essa codificação é feita para garantir que os dados sejam transmitidos corretamente e possam ser interpretados pelo servidor. 

Basicamente, essa codificação é importante porque um ARQUIVO é composto por DADOS BINÁRIOS, que para serem interpretados adequadamente pelo server, precisam ser codificados em um formato específico antes de serem enviados. Todos os arquivos são armazenados como dados binários em um computador ou dispositivo de armazenamento. Isso inclui arquivos de imagens, texto, áudio, vídeo e outros tipos de arquivos. Dados binários são dados que não são representados como texto, mas sim como uma sequência de bytes que representam o conteúdo do arquivo. 

Por exemplo, um arquivo de imagem é armazenado como uma sequência de bytes (dados binários) que representam as cores dos pixels. Já um arquivo de texto é armazenado como uma sequência de bytes, onde cada byte representa um caractere. Quando um arquivo é lido por um programa, os dados binários são interpretados de acordo com o formato do arquivo para exibir o conteúdo ao usuário.

Quando os dados binários são transmitidos através de uma rede, eles são enviados como uma sequência de bytes. Portanto, os bytes são a unidade básica de informação usada para armazenar e transmitir dados binários.

O atributo enctype, configurado da forma correta, é usado para codificar os dados binários do arquivo de uma maneira que permite que eles sejam transmitidos junto com os outros dados do formulário de forma individual e possam ser interpretados corretamente pelo servidor. Isso é importante porque os dados binários podem conter bytes que não são representáveis como texto ou que têm um significado especial em texto, necessitando desse processamento extra para o formato correto antes do envio. Dessa forma, se o seu form vai enviar um arquivo, o uso do atributo enctype configurado da forma adequada é obrigatório.

Como usar o atributo enctype?

O atributo enctype deve ser inserido dentro da tag de abertura do formulário (<form>), sendo que ele só pode ser usado se o método de envio dos dados for "post". Isso ocorre porque o método get envia os dados do formulário na URL, pelo cabeçalho da mensagem HTTP e não suporta o envio de dados binários, como arquivos. 

O atributo enctype aceita três possíveis valores, que são:

application/x-www-form-urlencoded - Esse é o valor padrão do atributo enctype, se não especificarmos nada, é esse valor que vai prevalecer. Ele codifica todos os caracteres antes de enviá-los 
(espaços são convertidos em símbolos “+” e caracteres especiais são convertidos em valores ASCII HEX - 
sequência de caracteres que começa com um sinal de porcentagem % seguido por dois dígitos hexadecimais)... Ou seja, é um valor que só estabelece uma codificação para os dados em forma de caracteres, mas não para arquivos. Ele não é adequado para enviar arquivos. 

Nota: Como já foi dito, para utilizar o atributo enctype, o método de envio dos dados do formulário precisa ser "post". Entretanto, formulários configurados com o método get utilizam por padrão a forma de codificação "application/x-www-form-urlencoded" no envio... A questão aqui é que em formulários do tipo get, não podemos alterar essa forma de codificação padrão. Por isso que o atributo enctype só é válido para formulários tipo post (ao tentar usar enctype em formulários get, o atributo é simplesmente ignorado pelo sistema).

multipart/form-data - No caso dos arquivos, esse valor é o mais importante. Ele é obrigatoriamente necessário se o seu formulário for enviar um arquivo, visto que ele tem a função de CODIFICAR os dados do arquivo de modo que o servidor possa receber e interpretar corretamente. 

Se o formulário da sua página vai enviar um arquivo, a configuração desse formulário com o atributo "enctype" com o valor "multipart/form-data" é obrigatória, visto que ele faz justamente esse processamento adicional. Caso essa configuração seja negligenciada (enctype="multipart/form-data"), o back-end simplesmente irá negar o arquivo, já que não conseguirá fazer uma interpretação correta do mesmo. 

Quando usamos o valor "multipart/form-data", os dados do formulário são codificados de uma maneira diferente. Cada campo do formulário, incluindo os campos de arquivo, é enviado como uma parte separada da mensagem, com um cabeçalho que especifica o nome do campo e o tipo de conteúdo (sendo que o conteúdo vai pelo corpo). O dado de cada campo é enviado de forma individual. Isso permite que os dados binários dos arquivos sejam enviados junto com os outros dados do formulário. Cada campo do formulário é enviado como uma parte separada da mensagem.

text/plain - Com esse valor, o formulário envia os dados sem qualquer codificação. Esse valor é raramente usado. Quando usado, serve para fazer depuração ou testes (o uso desse valor pode resultar em problemas de interpretação dos dados pelo servidor e implicações na segurança).

Input:color

	<input type="color" name=" " id=" ">

   - Pode ser definida uma cor inicial, usando o atributo value=" ".

	Ex:	<label for="icor">Cor: </label>
		<input type="color" name="cor" id="icor" value="#00ff00">


Input:range

	<input type="range" name=" " id=" ">

   - Por padrão, o range começa sempre em 50 (no meio), variando de 0 a 100, mas pode ser personalizado, utilizando os atributos value=" ", min=" " e max=" ", respectivamente.

	Ex:	label for="inivel">Nível de Satisfação: </label>
		<input type="range" name="nivel" id="inivel" min="1" max="5" value="2">


Input:file

	<input type="file" name=" " id=" ">

	- Ao trabalhar com input:file, usar sempre o atributo method="POST" dentro da tag <form>, para que não haja uma limitação de 3.000 bites no envio do arquivo.

	Ex:	<form action="cadastro.php" method="POST" autocomplete="on">
			<p>
				<label for="ifoto">Foto do perfil: </label>
				<input type="file" name="foto" id="ifoto">
			</p>
		</form>



ELEMENTO SELECT:

A tag de formulário <select></select> tem uma função muito parecida com a de um input.. Isso porque ela renderiza na tela um componente de entrada para o formulário.

O elemento HTML select (<select>) representa um controle que exibe um menu de opções. É um elemento que ao clicarmos, desce uma lista com diferentes opções para escolher.

No elemento select, o usuário não insere um dado digitando, ele simplesmente seleciona a opção que lhe atende... Portanto, use esse elemento para a entrada de dados que são imutáveis. Por exemplo: Usar o elemento select para escolher um dos estados do Brasil. Não existe necessidade de alguém eventualmente precisar escolher outro item que já não esteja na lista porque a composição dos estados é teoricamente imutável.

Nota: No elemento select, os atributos "name" e "id" também devem ser configurados normalmente... Ele também se enquadra em um componente de entrada como qualquer outro, portanto também precisa de uma label. Sendo que o VÍNCULO entre o componente select e sua respectiva label também deve ser estabelecido. 

Depois de inserir o select no seu form, é preciso definir as opções que irão compor a lista de seleção dele. Para definir as opões do elemento, usamos a tag <option></option>.

Essa tag deve ser inserida dentro do elemento select (option é sempre introduzido como filho de select nesse caso), sendo que ela tem a função de definir as opções aparecerão dentro do menu de seleção. Para cada opção da lista, um novo option deve ser aberto dentro de select.

O rótulo da opção (texto que representa o item de lista quando a caixa de seleção é aberta) deve ser inserido dentro do par de tags do option, por exemplo: <option>Santa Catarina</option>. 

Sendo que por padrão, quando uma tag option é aberta, um atributo "value" já acompanha a tag. É o conteúdo dentro de "value" que de fato será enviado para o servidor quando a submissão do form é executada. Seguindo o exemplo anterior, a nossa opção com o value configurado pode ser assim: <option value="SC">Santa Catarina</option>

Dentro de uma lista de seleção do elemento select, os options (itens da lista) podem ser AGRUPADOS em categorias intituladas, isso facilita a navegação do usuário. Por exemplo, na nossa lista com os estados do Brasil, poderíamos organizar esses estados pelas regiões do país, categorizar eles por região... Dessa maneira, quando a lista de seleção for aberta, os estados iriam aparecer agrupados por região, sendo que cada um desses grupos de estado teriam um título (sudeste, sul, centro-oeste e por aí vai).

Para fazer isso, utilizamos a tag <optgroup></optgroup>. Para formar um grupo dentro da lista de seleção com o optgroup, você deve envelopar com essa tag os itens (options) que supostamente fazem parte daquele grupo. Sendo que obrigatoriamente, quando uma tag optgroup é aberta, temos que usar nela o atributo "label" (é um atributo que se chama label, não é uma tag label). O texto inserido dentro do atributo label que será exibido para o usuário como o título daquele grupo quando a lista for aberta.  

Nota: Os itens da lista de seleção (options) ficam dispostos para o usuário na ordem de inserção do código HTML. 

Atributos do select:

selected:

O atributo selected serve para definirmos uma opção inicial padrão, ele deve ser inserido dentro da tag de abertura do option que você deseja definir como padrão. Dessa forma, quando a página com o elemento select for carregada, essa opção escolhida já vai aparecer por padrão selecionada no componente de entrada select, ficando a critério do usuário alterar a opção ou manter a padrão determinada por você.


textarea basicamente colocar em uma mensagem


Output:

	<output>	</output>

    - Não envia dados, apenas mostra algum tipo de resultado na tela.

Ex: <form action="cadastro php" method="get" autocomplete="on">
		<p>
			<label for="in1">Número 1: </label>
			<input type="number" name="n1" id="in1" min="0" max="50" required
			oninput="isoma.innerHTML = Number(in1.value) + Number(in2.value)">
		</p>

		<p>
			<label for="in2">Número 2: </label>
			<input type="number" name="n2" id="in2" min="0" max="50" required
                         oninput="isoma.innerHTML = Number(in1.value) + Number(in2.value)">
		</p>

		<p>
			<label for="isoma">Soma: </label>
			<output name="soma" id="isoma">0</output>
			(Valor inicial "0", depois será mostrado a soma entre o Número 1 e o Número 2)
		</p>

		<p>
			<input type="submit" value="Enviar">
			<input type="reset" value="Limpar">
		</p>
	 </form>




<p>
            <label for="iano">em que ano voce nasceu</label>
            <input type="number" name="ano" id="iano" min="1900" max="2023" oninput="calcIdade()">
        </p>

        <p>
            <label for="iidade"> sua idade é: </label>
            <output id="iidade">0</output>
        </p>
        <p>
            <input type="submit" value="enviar">
            <input type="reset" value="limpar">
        </p>

        <script>
            function calcIdade() {
                let atual = new Date().getFullYear()
                iidade.innerHTML = Number(atual) - Number(iano.value)
            }
        </script>





                            media Query


como criar media query é basicamente o link css tela e impressora e media pode ser uma coisa especifico ou tudo que é o all/print/screen


quando uso media posso informar media types e tmb media features. media type não tem entre parenteses e o media features tem isolados

Reunindo tudo em um único CSS

	- Pode ser feito usando a tag <style>, dentro de <head>, usando @media para especificar o tipo de mídia e 'and' para unir os 'media features';
	- Além disso pode ser feito também usando o 'link:css' para criar um arquivo de estilo separado.

Ex:	@charset "UTF-8";


	/* declarações gerais */
	
	@media all {
		h1 {
    			color: white;
    			text-shadow: 2px 2px 0px #1526a7;
    			padding: 10px;
		}
	}

	/* declarações retrato */

	@media screen and (orientation: portrait) {
		body {
        			background-image: url(../imagens/cev-portrait.jpg);
        			background-position: center bottom;
    		}
	}

	/* declarações paisagem */

	@media screen and (orientation: landscape) {
    		body {
        			background-image: url(../imagens/cev-landscape.jpg);
        			background-position: left bottom;
    		}
	}

 *Obs: Atalho para identar o código dentro do VS Code: Shift + Alt + F


<script>

        function mudouTamanho() {
            if (window.innerWidth  >= 768) {
                itens.style.display = 'block'
            } else {
                itens.style.display = 'none'
            }
        }


        function clickMenu() {
            if (itens.style.display == 'block') {
                itens.style.display = 'none'
            } else {
                itens.style.display = 'block'
            }
        }
    </script>